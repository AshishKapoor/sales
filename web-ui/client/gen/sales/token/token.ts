/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Sales Cookbook API
 * Sales Cookbook API Documentation - A comprehensive sales management system
 * OpenAPI spec version: 1.0.0
 */
import type {
  Key
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  TokenObtainPair,
  TokenRefresh
} from '.././';

import { httpSalesClient } from '../../../http-sales-client';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



  
  
  
/**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 */
export const tokenCreate = (
    tokenObtainPair: NonReadonly<TokenObtainPair>,
 ) => {
    return httpSalesClient<TokenObtainPair>(
    {url: `/api/token/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenObtainPair
    },
    );
  }



export const getTokenCreateMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: NonReadonly<TokenObtainPair> }): Promise<TokenObtainPair> => {
    return tokenCreate(arg);
  }
}
export const getTokenCreateMutationKey = () => [`/api/token/`] as const;

export type TokenCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tokenCreate>>>
export type TokenCreateMutationError = unknown

export const useTokenCreate = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof tokenCreate>>, TError, Key, NonReadonly<TokenObtainPair>, Awaited<ReturnType<typeof tokenCreate>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTokenCreateMutationKey();
  const swrFn = getTokenCreateMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const tokenRefreshCreate = (
    tokenRefresh: NonReadonly<TokenRefresh>,
 ) => {
    return httpSalesClient<TokenRefresh>(
    {url: `/api/token/refresh/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: tokenRefresh
    },
    );
  }



export const getTokenRefreshCreateMutationFetcher = ( ) => {
  return (_: Key, { arg }: { arg: NonReadonly<TokenRefresh> }): Promise<TokenRefresh> => {
    return tokenRefreshCreate(arg);
  }
}
export const getTokenRefreshCreateMutationKey = () => [`/api/token/refresh/`] as const;

export type TokenRefreshCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tokenRefreshCreate>>>
export type TokenRefreshCreateMutationError = unknown

export const useTokenRefreshCreate = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof tokenRefreshCreate>>, TError, Key, NonReadonly<TokenRefresh>, Awaited<ReturnType<typeof tokenRefreshCreate>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTokenRefreshCreateMutationKey();
  const swrFn = getTokenRefreshCreateMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
